package coreChunk;

import hashFunc.Hasher;

import java.io.IOException;
import java.io.OutputStream;
import java.math.BigInteger;
import java.nio.file.*;
import java.util.*;

public class HashSortedChunkBuilder {
    private final Entry[] masterEntries;
    private final int elementSize = 3;
    private final int totalElements;
    private final Hasher hasher;
    private final ChunkValueEncoding converter;

    public HashSortedChunkBuilder(
            String relativeMasterChunkPath,
            Hasher hasher,
            ChunkValueEncoding converter
    ) throws IOException {
        Path absolutePath = Paths.get("").toAbsolutePath()
                .resolve(relativeMasterChunkPath);
        byte[] rawChunk = Files.readAllBytes(absolutePath);

        if (rawChunk.length != (1 << 24) * elementSize)
            throw new IllegalArgumentException(
                    "–†–∞–∑–º–µ—Ä masterChunk –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω: " + rawChunk.length
            );

        this.totalElements = rawChunk.length / elementSize;
        this.masterEntries = new Entry[totalElements];
        for (int i = 0; i < totalElements; i++) {
            int off = i * elementSize;
            byte[] raw = Arrays.copyOfRange(rawChunk, off, off + elementSize);
            masterEntries[i] = new Entry(raw);
        }

        this.hasher = hasher;
        this.converter = converter;
    }

    public void sortChunkToFile(String outputDirectoryPath, int chunkIndex) throws IOException {
        long t0 = System.currentTimeMillis();
        System.out.println("üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ #" + chunkIndex);

        // 1) –ö–ª–æ–Ω–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ (raw –æ—Å—Ç–∞—ë—Ç—Å—è —Ç–µ–º –∂–µ)
        Entry[] chunkEntries = new Entry[totalElements];
        for (int i = 0; i < totalElements; i++) {
            chunkEntries[i] = new Entry(Arrays.copyOf(masterEntries[i].raw, elementSize));
        }
        // 2) –ì–µ–Ω–µ—Ä–∏–º —Ö—ç—à–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        long t1 = System.currentTimeMillis();
        for (int i = 0; i < totalElements; i++) {
            if (i % 2_000_000 == 0) {
                System.out.println("  ‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è [" + i + "/" + totalElements + "]");
            }
            byte[] raw = chunkEntries[i].raw;
            BigInteger val = new BigInteger(1, raw)
                    .add(BigInteger.valueOf(chunkIndex).shiftLeft(24));
            String s = converter.convertToBaseString(val);
            chunkEntries[i].hash = hasher.getBinHash(s);
        }
        long t2 = System.currentTimeMillis();
        System.out.println("‚úÖ –•—ç—à–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ " + (t2 - t1)/1000.0 + " —Å–µ–∫");

        // 3) –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ö—ç—à—É
        System.out.println("üîÉ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞...");
        long t3 = System.currentTimeMillis();
        Arrays.sort(chunkEntries, Comparator.comparing(e -> new BigInteger(1, e.hash)));
        long t4 = System.currentTimeMillis();
        System.out.println("‚úÖ –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ " + (t4 - t3)/1000.0 + " —Å–µ–∫");

        // 4) –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        Path outPath = Paths.get(outputDirectoryPath, "chunk_" + chunkIndex + ".bin");
        Path folder = outPath.getParent();
        if (!Files.exists(folder)) {
            Files.createDirectories(folder);
            System.out.println("üìÅ –ü–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: " + folder.toAbsolutePath());
        }

        // 5) –ó–∞–ø–∏—Å—å raw-–±–∞–π—Ç–æ–≤ –≤ —Ñ–∞–π–ª
        System.out.println("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤: " + outPath.toAbsolutePath());
        long t5 = System.currentTimeMillis();
        try (OutputStream os = Files.newOutputStream(outPath)) {
            for (Entry e : chunkEntries) {
                os.write(e.raw);
            }
        }
        long t6 = System.currentTimeMillis();
        System.out.println("‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –∑–∞ " + (t6 - t5)/1000.0 + " —Å–µ–∫");

        long t7 = System.currentTimeMillis();
        System.out.println("üéâ –ß–∞–Ω–∫ #" + chunkIndex + " –≥–æ—Ç–æ–≤ –∑–∞ " + (t7 - t0)/1000.0 + " —Å–µ–∫\n");
    }

    private static class Entry {
        final byte[] raw;
        byte[] hash;
        Entry(byte[] raw) { this.raw = raw; }
    }
}
